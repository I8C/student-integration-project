{
  "openapi": "3.0.3",
  "info": {
    "title": "Festival Ticket Sales API",
    "description": "Public entry point for managing festival ticket purchases. This API is designed for asynchronous, event-driven interactions.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.festival.com/v1"
    }
  ],
  "paths": {
    "/tickets/{ticketId}/purchase": {
      "post": {
        "summary": "Initiates a new ticket purchase.",
        "description": "Publishes a purchase request to the event backbone. This is an asynchronous operation.\nThe API immediately returns a 202 Accepted response, and the client should monitor\nthe purchase status separately.\n",
        "operationId": "purchaseTicket",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier for the ticket type being purchased."
          }
        ],
        "requestBody": {
          "description": "Purchase request details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Purchase request successfully accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseAcceptedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body or parameters."
          },
          "429": {
            "description": "Rate limit exceeded."
          }
        }
      }
    },
    "/purchases/{purchaseId}": {
      "get": {
        "summary": "Retrieves the status of a ticket purchase.",
        "description": "Checks the current status of an initiated purchase. This allows clients to\nasynchronously track payment and fulfillment progress.\n",
        "operationId": "purchaseStatus",
        "parameters": [
          {
            "name": "purchaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier for the initiated purchase."
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase status retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseStatus"
                }
              }
            }
          },
          "404": {
            "description": "Purchase not found."
          }
        }
      }
    },
    "/purchases": {
      "post": {
        "summary": "Loads a status of a ticket purchase in the cache.",
        "description": "Loads a status of a ticket purchase in the cache.\n",
        "operationId": "loadPurchaseStatus",
        "requestBody": {
          "description": "Purchase status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseStatus"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase status successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseStatus"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          }
        }
      }
    },
    "/tickets/{ticketType}/inventory": {
      "get": {
        "summary": "Gets the real-time inventory count for a ticket type.",
        "description": "Exposes the current number of available tickets, updated by the Flink job.",
        "operationId": "ticketInventory",
        "parameters": [
          {
            "name": "ticketType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier for the ticket type."
          }
        ],
        "responses": {
          "200": {
            "description": "Real-time inventory count retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketInventory"
                }
              }
            }
          },
          "404": {
            "description": "Ticket type not found."
          }
        }
      }
    },
    "/tickets/inventory": {
      "post": {
        "summary": "Loads a real-time inventory count for a ticket type.",
        "description": "Loads a real-time inventory count for a ticket type.",
        "operationId": "loadTicketInventory",
        "requestBody": {
          "description": "Ticket Inventory inventory.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketInventory"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ticket inventory successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketInventory"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PurchaseRequest": {
        "type": "object",
        "required": [
          "userId",
          "quantity",
          "ticketType"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the user making the purchase."
          },
          "quantity": {
            "type": "integer",
            "description": "The number of tickets to purchase.",
            "minimum": 1
          },
          "ticketType": {
            "type": "string",
            "enum": [
              "normal",
              "vip"
            ],
            "description": "The type of ticket being purchased."
          }
        }
      },
      "PurchaseAcceptedResponse": {
        "type": "object",
        "properties": {
          "purchaseId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID assigned to the new purchase request."
          },
          "statusUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL to check the status of the purchase."
          }
        }
      },
      "PurchaseStatus": {
        "type": "object",
        "properties": {
          "purchaseId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ],
            "description": "The current status of the purchase."
          },
          "paymentStatus": {
            "type": "string",
            "description": "Optional details about the payment status."
          }
        }
      },
      "TicketInventory": {
        "type": "object",
        "properties": {
          "ticketType": {
            "type": "string"
          },
            "availableCount": {
            "type": "integer",
            "description": "The current number of available tickets.",
            "minimum": 0
          }
        }
      }
    }
  }
}
